PS C:\Users\64352\Downloads\material-applications-main\example-backend> docker build . -t backend-project
[+] Building 16.2s (10/10) FINISHED
 => [internal] load build definition from Dockerfile                                                               0.0s
 => => transferring dockerfile: 199B                                                                               0.0s
 => [internal] load .dockerignore                                                                                  0.1s
 => => transferring context: 111B                                                                                  0.0s
 => [internal] load metadata for docker.io/library/golang:1.16                                                     0.8s
 => [internal] load build context                                                                                  0.0s
 => => transferring context: 28.90kB                                                                               0.0s
 => [1/5] FROM docker.io/library/golang:1.16@sha256:74e2f21075e16cb560fd3c94c18538daaee0063afb42e5667ff4a880889fb  0.0s
 => CACHED [2/5] WORKDIR /usr/src/app                                                                              0.0s
 => CACHED [3/5] COPY . .                                                                                          0.0s
 => [4/5] RUN go build                                                                                             9.5s
 => [5/5] RUN go test ./...                                                                                        4.7s
 => exporting to image                                                                                             1.1s
 => => exporting layers                                                                                            1.0s
 => => writing image sha256:ea46ce7760dabdc7d3ee057321a71c5da86c967ab3b66519e019c6a407bc70f0                       0.0s
 => => naming to docker.io/library/backend-project                                                                 0.0s

Use 'docker scan' to run Snyk tests against images to find vulnerabilities and learn how to fix them
PS C:\Users\64352\Downloads\material-applications-main\example-backend> docker run -p 8080:8080 backend-project
[Ex 2.4+] REDIS_HOST env was not passed so redis connection is not initialized
[Ex 2.6+] POSTGRES_HOST env was not passed so postgres connection is not initialized
[GIN-debug] [WARNING] Creating an Engine instance with the Logger and Recovery middleware already attached.

[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.
 - using env:   export GIN_MODE=release
 - using code:  gin.SetMode(gin.ReleaseMode)

[GIN-debug] GET    /ping                     --> server/router.pingpong (4 handlers)
[GIN-debug] GET    /messages                 --> server/controller.GetMessages (4 handlers)
[GIN-debug] POST   /messages                 --> server/controller.CreateMessage (4 handlers)
[GIN-debug] Listening and serving HTTP on :8080
[GIN] 2022/02/08 - 16:34:27 | 200 |       124.3Âµs |      172.17.0.1 | GET      "/ping"




